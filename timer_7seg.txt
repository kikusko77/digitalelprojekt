library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity timer_7seg is
    port(
        clk: in std_logic;
        rst: in std_logic;
        en: in std_logic;
        user_value1: in std_logic_vector(9 downto 0); -- new input for user value 1
        user_value2: in std_logic_vector(9 downto 0); -- new input for user value 2
        start_button: in std_logic; -- new input for start button
        seg1: out std_logic_vector(6 downto 0);
        seg2: out std_logic_vector(6 downto 0);
        seg3: out std_logic_vector(6 downto 0);
        seg: out std_logic_vector(6 downto 0);
        seg1_p: out std_logic_vector(6 downto 0);
        seg2_p: out std_logic_vector(6 downto 0)
    );
end entity timer_7seg;

-- rest of the code









-- rest of the code

architecture behavioral of timer_7seg is
    component timer is
        generic(
            g_CNT_WIDTH: natural := 9;
            g_NUM_CYCLES: natural := 3;
            g_CNT1_INIT: natural := 20;
            g_CNT2_INIT: natural := 10
        );
        port(
            clk: in std_logic;
            rst: in std_logic;
            en: in std_logic;
            cnt1: out std_logic_vector(g_CNT_WIDTH downto 0);
            cnt2: out std_logic_vector(g_CNT_WIDTH downto 0);
            cycle_count: out std_logic_vector(1 downto 0)
        );
    end component timer;

    -- rest of the code

    signal cnt1_sig: std_logic_vector(9 downto 0);
    signal hex_sig: std_logic_vector(9 downto 0);
    signal cycle1_count: std_logic_vector(1 downto 0);
    signal hex_sig_k: std_logic_vector(1 downto 0);
    signal hex_sig_p: std_logic_vector(9 downto 0);
    signal cnt2_sig: std_logic_vector(9 downto 0);

begin
    inst_timer: timer
        generic map (
            g_CNT1_INIT => to_integer(unsigned(user_value1)), -- use user_value1 instead of default value
            g_CNT2_INIT => to_integer(unsigned(user_value2)) -- use user_value2 instead of default value
        )
        port map (
            clk => clk,
            rst => rst,
            en => start_button, -- use start_button instead of en
            cnt1 => cnt1_sig,
            cnt2 => cnt2_sig,
            cycle_count => cycle1_count
        );

-- rest of the code
















-- rest of the code

architecture behavioral of timer_7seg is
    component timer is
        generic(
            g_CNT_WIDTH: natural := 9;
            g_NUM_CYCLES: natural := 3;
            g_CNT1_INIT: natural := 20;
            g_CNT2_INIT: natural := 10
        );
        port(
            clk: in std_logic;
            rst: in std_logic;
            en: in std_logic;
            cnt1_init: in std_logic_vector(g_CNT_WIDTH downto 0); -- new input for user value 1
            cnt2_init: in std_logic_vector(g_CNT_WIDTH downto 0); -- new input for user value 2
            cnt1: out std_logic_vector(g_CNT_WIDTH downto 0);
            cnt2: out std_logic_vector(g_CNT_WIDTH downto 0);
            cycle_count: out std_logic_vector(1 downto 0)
        );
    end component timer;

    -- rest of the code

    signal cnt1_sig: std_logic_vector(9 downto 0);
    signal hex_sig: std_logic_vector(9 downto 0);
    signal cycle1_count: std_logic_vector(1 downto 0);
    signal hex_sig_k: std_logic_vector(1 downto 0);
    signal hex_sig_p: std_logic_vector(9 downto 0);
    signal cnt2_sig: std_logic_vector(9 downto 0);

begin
    inst_timer: timer
        port map (
            clk => clk,
            rst => rst,
            en => start_button,
            cnt1_init => user_value1, -- pass user_value1 to timer entity
            cnt2_init => user_value2, -- pass user_value2 to timer entity
            cnt1 => cnt1_sig,
            cnt2 => cnt2_sig,
            cycle_count => cycle1_count
        );

-- rest of the code
